//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;
using Object = UnityEngine.Object;

public class WorldMap_WorldMapViewWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WorldMap.WorldMapView), typeof(LuaBehaviour));
		L.RegFunction("CreateMapPool", CreateMapPool);
		L.RegFunction("UpdateWorldMapInfo", UpdateWorldMapInfo);
		L.RegFunction("UpdateMarchingsLines", UpdateMarchingsLines);
		L.RegFunction("UpdateShowMap", UpdateShowMap);
		L.RegFunction("SetTempPlayer", SetTempPlayer);
		L.RegFunction("WorldMoveSuccess", WorldMoveSuccess);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ItemHeight", get_ItemHeight, set_ItemHeight);
		L.RegVar("ItemWidth", get_ItemWidth, set_ItemWidth);
		L.RegVar("MinPos", get_MinPos, set_MinPos);
		L.RegVar("MaxPos", get_MaxPos, set_MaxPos);
		L.RegVar("InitCountX", get_InitCountX, set_InitCountX);
		L.RegVar("InitCountY", get_InitCountY, set_InitCountY);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateMapPool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)ToLua.CheckObject<WorldMap.WorldMapView>(L, 1);
			UnityEngine.Object[] arg0 = ToLua.CheckParamsObject<UnityEngine.Object>(L, 2, count - 1);
			obj.CreateMapPool(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateWorldMapInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)ToLua.CheckObject<WorldMap.WorldMapView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UpdateWorldMapInfo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateMarchingsLines(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)ToLua.CheckObject<WorldMap.WorldMapView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UpdateMarchingsLines(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateShowMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)ToLua.CheckObject<WorldMap.WorldMapView>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.UpdateShowMap(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTempPlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)ToLua.CheckObject<WorldMap.WorldMapView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetTempPlayer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldMoveSuccess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)ToLua.CheckObject<WorldMap.WorldMapView>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.WorldMoveSuccess(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ItemHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			float ret = obj.ItemHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ItemHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ItemWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			float ret = obj.ItemWidth;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ItemWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MinPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			UnityEngine.Vector2 ret = obj.MinPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MinPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			UnityEngine.Vector2 ret = obj.MaxPos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InitCountX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			int ret = obj.InitCountX;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InitCountX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InitCountY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			int ret = obj.InitCountY;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InitCountY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ItemHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ItemHeight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ItemHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ItemWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ItemWidth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ItemWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MinPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.MinPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MinPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.MaxPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InitCountX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InitCountX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InitCountX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InitCountY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldMap.WorldMapView obj = (WorldMap.WorldMapView)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InitCountY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InitCountY on a nil value");
		}
	}
}

