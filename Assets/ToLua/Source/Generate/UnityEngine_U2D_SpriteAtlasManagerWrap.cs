//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_U2D_SpriteAtlasManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("SpriteAtlasManager");
		L.RegVar("atlasRequested", get_atlasRequested, set_atlasRequested);
		L.RegVar("atlasRegistered", get_atlasRegistered, set_atlasRegistered);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_atlasRequested(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string,System.Action<UnityEngine.U2D.SpriteAtlas>>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_atlasRegistered(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<UnityEngine.U2D.SpriteAtlas>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_atlasRequested(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UnityEngine.U2D.SpriteAtlasManager.atlasRequested' can only appear on the left hand side of += or -= when used outside of the type 'UnityEngine.U2D.SpriteAtlasManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string,System.Action<UnityEngine.U2D.SpriteAtlas>> ev = (System.Action<string,System.Action<UnityEngine.U2D.SpriteAtlas>>)arg0.func;
				UnityEngine.U2D.SpriteAtlasManager.atlasRequested += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string,System.Action<UnityEngine.U2D.SpriteAtlas>> ev = (System.Action<string,System.Action<UnityEngine.U2D.SpriteAtlas>>)arg0.func;
				UnityEngine.U2D.SpriteAtlasManager.atlasRequested -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_atlasRegistered(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UnityEngine.U2D.SpriteAtlasManager.atlasRegistered' can only appear on the left hand side of += or -= when used outside of the type 'UnityEngine.U2D.SpriteAtlasManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.U2D.SpriteAtlas> ev = (System.Action<UnityEngine.U2D.SpriteAtlas>)arg0.func;
				UnityEngine.U2D.SpriteAtlasManager.atlasRegistered += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.U2D.SpriteAtlas> ev = (System.Action<UnityEngine.U2D.SpriteAtlas>)arg0.func;
				UnityEngine.U2D.SpriteAtlasManager.atlasRegistered -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

